best_params_SUPPORT,best_model_SUPPORT,cindex_train_SUPPORT,cindex_test_SUPPORT
"{'estimator__batch_size': 128, 'estimator__lr': 0.001269683465237491, 'estimator__module__dropout': 0.3517292805330962, 'estimator__module__n_layers': 1, 'estimator__module__num_nodes': 64, 'estimator__optimizer__weight_decay': 0}","<bound method Pipeline.get_params of Pipeline(steps=[('scaler',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('customstandardscaler',
                                                  CustomStandardScaler(),
                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7f9408c41540>),
                                                 ('customstandardscaler2',
                                                  CustomStandardScaler2(),
                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7f9408c41090>)])),
                ('estimator',
                 <class 'skorch.net.NeuralNet'>[initialized](
  module_=SurvivalModel(
    (layers): Sequential(
      (0): Linear(in_features=14, out_features=64, bias=True)
      (1): ReLU()
      (2): Dropout(p=0.3517292805330962, inplace=False)
      (3): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (4): Linear(in_features=64, out_features=1, bias=True)
    )
  ),
))])>",0.558665747974964,0.5402164323212612
"{'estimator__batch_size': 1024, 'estimator__lr': 0.006068450890498813, 'estimator__module__dropout': 0.2864372445417568, 'estimator__module__n_layers': 4, 'estimator__module__num_nodes': 128, 'estimator__optimizer__weight_decay': 0.2}","<bound method Pipeline.get_params of Pipeline(steps=[('scaler',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('customstandardscaler',
                                                  CustomStandardScaler(),
                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7f94088143a0>),
                                                 ('customstandardscaler2',
                                                  CustomStandardScaler2(),
                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7f94088178b0>)])),
                ('est...
      (10): Dropout(p=0.2864372445417568, inplace=False)
      (11): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (12): Linear(in_features=128, out_features=128, bias=True)
      (13): ReLU()
      (14): Dropout(p=0.2864372445417568, inplace=False)
      (15): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (16): Linear(in_features=128, out_features=1, bias=True)
    )
  ),
))])>",0.5511546248847622,0.5404945682829813
"{'estimator__batch_size': 128, 'estimator__lr': 0.0029954512054772083, 'estimator__module__dropout': 0.23489171185038318, 'estimator__module__n_layers': 2, 'estimator__module__num_nodes': 512, 'estimator__optimizer__weight_decay': 0.02}","<bound method Pipeline.get_params of Pipeline(steps=[('scaler',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('customstandardscaler',
                                                  CustomStandardScaler(),
                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7f94087bdf00>),
                                                 ('customstandardscaler2',
                                                  CustomStandardScaler2(),
                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7f94087be740>)])),
                ('est...
      (2): Dropout(p=0.23489171185038318, inplace=False)
      (3): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (4): Linear(in_features=512, out_features=512, bias=True)
      (5): ReLU()
      (6): Dropout(p=0.23489171185038318, inplace=False)
      (7): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): Linear(in_features=512, out_features=1, bias=True)
    )
  ),
))])>",0.5417559473911939,0.5258702390550406
"{'estimator__batch_size': 256, 'estimator__lr': 0.0010650960378303616, 'estimator__module__dropout': 0.5091997248370175, 'estimator__module__n_layers': 4, 'estimator__module__num_nodes': 64, 'estimator__optimizer__weight_decay': 0.2}","<bound method Pipeline.get_params of Pipeline(steps=[('scaler',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('customstandardscaler',
                                                  CustomStandardScaler(),
                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7f94087bc340>),
                                                 ('customstandardscaler2',
                                                  CustomStandardScaler2(),
                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7f94087bf910>)])),
                ('est...
      (10): Dropout(p=0.5091997248370175, inplace=False)
      (11): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (12): Linear(in_features=64, out_features=64, bias=True)
      (13): ReLU()
      (14): Dropout(p=0.5091997248370175, inplace=False)
      (15): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (16): Linear(in_features=64, out_features=1, bias=True)
    )
  ),
))])>",0.5353369452820658,0.5363594166738048
"{'estimator__batch_size': 256, 'estimator__lr': 0.0011952255217715787, 'estimator__module__dropout': 0.3197987245895792, 'estimator__module__n_layers': 2, 'estimator__module__num_nodes': 64, 'estimator__optimizer__weight_decay': 0.1}","<bound method Pipeline.get_params of Pipeline(steps=[('scaler',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('customstandardscaler',
                                                  CustomStandardScaler(),
                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7f9411ced8a0>),
                                                 ('customstandardscaler2',
                                                  CustomStandardScaler2(),
                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7f9411ced2d0>)])),
                ('est...
      (2): Dropout(p=0.3197987245895792, inplace=False)
      (3): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (4): Linear(in_features=64, out_features=64, bias=True)
      (5): ReLU()
      (6): Dropout(p=0.3197987245895792, inplace=False)
      (7): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): Linear(in_features=64, out_features=1, bias=True)
    )
  ),
))])>",0.5509843481498434,0.5472035362514379
