best_params_RGBSG,best_model_RGBSG,cindex_train_RGBSG,cindex_test_RGBSG
"{'estimator__batch_size': 64, 'estimator__module__dropout': 0.4685498889685238, 'estimator__module__n_layers': 4, 'estimator__module__num_nodes': 128, 'estimator__optimizer__weight_decay': 0}","<bound method Pipeline.get_params of Pipeline(steps=[('scaler',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('customstandardscaler',
                                                  CustomStandardScaler(),
                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7fc9b8e4d810>),
                                                 ('customstandardscaler2',
                                                  CustomStandardScaler2(),
                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7fca2aeb6fe0>)])),
                ('est...
      (10): Dropout(p=0.4685498889685238, inplace=False)
      (11): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (12): Linear(in_features=128, out_features=128, bias=True)
      (13): ReLU()
      (14): Dropout(p=0.4685498889685238, inplace=False)
      (15): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (16): Linear(in_features=128, out_features=1, bias=True)
    )
  ),
))])>",0.6569849610134338,0.691757722919196
"{'estimator__batch_size': 64, 'estimator__module__dropout': 0.24543885184642653, 'estimator__module__n_layers': 1, 'estimator__module__num_nodes': 64, 'estimator__optimizer__weight_decay': 0.05}","<bound method Pipeline.get_params of Pipeline(steps=[('scaler',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('customstandardscaler',
                                                  CustomStandardScaler(),
                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7fca2aef0460>),
                                                 ('customstandardscaler2',
                                                  CustomStandardScaler2(),
                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7fc9b8e9d000>)])),
                ('estimator',
                 <class 'skorch.net.NeuralNet'>[initialized](
  module_=SurvivalModel(
    (layers): Sequential(
      (0): Linear(in_features=7, out_features=64, bias=True)
      (1): ReLU()
      (2): Dropout(p=0.24543885184642653, inplace=False)
      (3): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (4): Linear(in_features=64, out_features=1, bias=True)
    )
  ),
))])>",0.6722866417547417,0.6760578354241973
"{'estimator__batch_size': 64, 'estimator__module__dropout': 0.24543885184642653, 'estimator__module__n_layers': 1, 'estimator__module__num_nodes': 64, 'estimator__optimizer__weight_decay': 0.05}","<bound method Pipeline.get_params of Pipeline(steps=[('scaler',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('customstandardscaler',
                                                  CustomStandardScaler(),
                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7fc9b8e9f730>),
                                                 ('customstandardscaler2',
                                                  CustomStandardScaler2(),
                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7fc9b8e9f5b0>)])),
                ('estimator',
                 <class 'skorch.net.NeuralNet'>[initialized](
  module_=SurvivalModel(
    (layers): Sequential(
      (0): Linear(in_features=7, out_features=64, bias=True)
      (1): ReLU()
      (2): Dropout(p=0.24543885184642653, inplace=False)
      (3): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (4): Linear(in_features=64, out_features=1, bias=True)
    )
  ),
))])>",0.6735620982010281,0.6552106282128313
"{'estimator__batch_size': 64, 'estimator__module__dropout': 0.24543885184642653, 'estimator__module__n_layers': 1, 'estimator__module__num_nodes': 64, 'estimator__optimizer__weight_decay': 0.05}","<bound method Pipeline.get_params of Pipeline(steps=[('scaler',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('customstandardscaler',
                                                  CustomStandardScaler(),
                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7fca2aee9f00>),
                                                 ('customstandardscaler2',
                                                  CustomStandardScaler2(),
                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7fca2aeeb8b0>)])),
                ('estimator',
                 <class 'skorch.net.NeuralNet'>[initialized](
  module_=SurvivalModel(
    (layers): Sequential(
      (0): Linear(in_features=7, out_features=64, bias=True)
      (1): ReLU()
      (2): Dropout(p=0.24543885184642653, inplace=False)
      (3): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (4): Linear(in_features=64, out_features=1, bias=True)
    )
  ),
))])>",0.678813422787418,0.6444049637944493
"{'estimator__batch_size': 64, 'estimator__module__dropout': 0.24543885184642653, 'estimator__module__n_layers': 1, 'estimator__module__num_nodes': 64, 'estimator__optimizer__weight_decay': 0.05}","<bound method Pipeline.get_params of Pipeline(steps=[('scaler',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('customstandardscaler',
                                                  CustomStandardScaler(),
                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7fca2aeeb100>),
                                                 ('customstandardscaler2',
                                                  CustomStandardScaler2(),
                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7fca2aee82e0>)])),
                ('estimator',
                 <class 'skorch.net.NeuralNet'>[initialized](
  module_=SurvivalModel(
    (layers): Sequential(
      (0): Linear(in_features=7, out_features=64, bias=True)
      (1): ReLU()
      (2): Dropout(p=0.24543885184642653, inplace=False)
      (3): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (4): Linear(in_features=64, out_features=1, bias=True)
    )
  ),
))])>",0.6739465226505786,0.6553195182524635
